base_global_planner: navfn/NavfnROS
base_local_planner: base_local_planner/TrajectoryPlannerROS

controller_frequency: 10

### Recovery ###

recovery_behaviors:
  - name: conservative_reset 
    type: clear_costmap_recovery/ClearCostmapRecovery
  - name: aggressive_reset
    type: clear_costmap_recovery/ClearCostmapRecovery

conservative_reset:
  reset_distance: 1.100
  layer_names: ['obstacle_layer']

aggressive_reset:
  reset_distance: 0.550
  layer_names: ['obstacle_layer']

#For full documentation of the parameters in this file, and a list of all the
#parameters available for TrajectoryPlannerROS, please see
#http://www.ros.org/wiki/base_local_planner
TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_x: 0.5
  acc_lim_theta: 1.0

  #Set the velocity limits of the robot
  max_vel_x: 2.0
  min_vel_x: 0.05
  max_rotational_vel: 1.0
  min_in_place_rotational_vel: 0.05

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.1
  
  #For this example, we'll use a holonomic robot
  holonomic_robot: false

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.12
  yaw_goal_tolerance: 0.3 # 0.03

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  # If we want to look 4m ahead at full speed, sim_time must > 2s
  # If sim_time > max_vel_x / acc_lim_x (max slowdown time), then we will 
  # brake very slowly because the planner looks too far in the future
  sim_time: 2.2 #
  sim_granularity: 0.015 # 0.01
  vx_samples: 10 #3
  vtheta_samples: 20 #20

  #Parameters for scoring trajectories
  meter_scoring: true
  publish_cost_grid_pc: true
  path_distance_bias: 0.6
  goal_distance_bias: 0.8 # 0.6
  occdist_scale: 0.05
  
  # How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05
  escape_reset_dist: 0.55
  heading_lookahead: 0.425

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: false



  #Eat up the plan as the robot moves along it
  prune_plan: true
