#!/usr/bin/env python

from __future__ import division

import logging
import numpy as np
import os
import yaml
from PIL import Image, ImageDraw

logging.basicConfig()
logging.getLogger().setLevel(logging.INFO)
logger = logging.getLogger(__name__)

width = 10.0
height = 12.0

start_offset = height / 3

resolution = 0.05
image_width = int(width / resolution)
image_height = int(height / resolution)


def get_path(name):
    return os.path.join('..', 'worlds', 'left_turns', name)


def get_map_meta_data(image):
    return {
        'image': image,
        'resolution': resolution,
        'origin': [-width / 2, -height / 2 + start_offset, 0],
        # 'origin': [width / 2, height / 4, 0.0],
        'occupied_thresh': 0.75,
        'free_thresh': 0.25,
        'negate': 0
    }


def get_stage_world(name):
    return '''
include "../common.inc"
include "../agv.inc"

# load an environment bitmap
floorplan
( 
  name "{0}"
  bitmap "{0}"
  size [{1} {2} 0.500]  
  pose [ 0.0 {3} 0.000 0.000 ]
)

# throw in a robot
agv( pose [  0.0 0.0 0.0 90.0 ] name "agv_0" color "pale green")

#throw in an obstacle
human(pose [16.600 13.166 0.000 0.000] name "ov" color "red")
        '''.format(name, width, height, start_offset)


for corridor_width in np.linspace(1.0, 3.0, num=10):
    with open(get_path('left-turn-%.2f.pgm' % corridor_width), 'w') as f:
        logger.info('writing %s', f.name)

        line_width = int(corridor_width / resolution)

        im = Image.new('RGB', (image_width, image_height), (0, 0, 0))
        draw = ImageDraw.Draw(im)

        draw.line((image_width // 2 + line_width // 2, image_height // 2, 0, image_height // 2),
                  width=line_width, fill=(255, 255, 255))
        draw.line((image_width // 2, image_height // 2 - line_width // 2, image_width // 2, image_height),
                  width=line_width, fill=(255, 255, 255))

        im.save(f)

    with open(get_path('left-turn-%.2f.yaml' % corridor_width), 'w') as f:
        logger.info('writing %s', f.name)
        yaml.dump(get_map_meta_data('left-turn-%.2f.pgm' % corridor_width), f)

    with open(get_path('left-turn-%.2f.world' % corridor_width), 'w') as f:
        logger.info('writing %s', f.name)
        f.write(get_stage_world('left-turn-%.2f.pgm' % corridor_width))
